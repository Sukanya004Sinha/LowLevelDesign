

ðŸ”¹ Beginner Level
What is the Java Streams API? How is it different from collections?

What is the difference between Stream and Collection?

How do you create a stream in Java?

What are the different types of streams in Java?

What is the difference between intermediate and terminal operations in streams?

What is lazy evaluation in streams?

How do you convert a list to a stream and vice versa?

ðŸ”¹ Intermediate Level
What is the difference between map() and flatMap() in streams?

How do you use filter() in streams? Give an example.

What does collect(Collectors.toList()) do?

How can you use streams to remove duplicates from a list?

What is the role of Optional in Java Streams?

How can you sort a stream of objects based on a field?

How do you use reduce() in streams?

What does peek() do in a stream pipeline?

ðŸ”¹ Advanced Level
How do you perform grouping in streams (e.g., using Collectors.groupingBy)?

Explain the difference between findFirst() and findAny().

How would you parallelize stream operations? What are the trade-offs?

What are the pitfalls of using parallel streams?

How would you implement a custom collector?

Can you short-circuit a stream operation? How?

What are stateless vs stateful operations in streams?

What is the difference between limit() and skip()?

ðŸ”¹ Hands-On Coding Questions
Write a Java Stream to find the second highest number in a list.

Given a list of strings, count the number of strings that start with a specific letter using streams.

Using streams, group a list of employees by department.

Find the first non-repeating character in a string using streams.

Flatten a list of lists using streams.


ðŸ”¹ Beginner Level
Filter names starting with a specific letter.
Input: List of names â†’ Output: Names starting with "A".

Convert a list of strings to uppercase.

Count how many strings have length greater than 5.

Remove duplicate elements from a list using streams.

Sort a list of integers in ascending and descending order.

Find the first element that matches a condition.
(e.g., first even number)

Join a list of strings with a comma separator.

Check if any string in the list contains a given substring.

ðŸ”¸ Intermediate Level
Group a list of strings by their lengths.

Count the number of occurrences of each word in a list.

Flatten a list of lists using flatMap.

Find the maximum and minimum number from a list of integers.

Convert a list of strings to a map where key = string, value = length.

Partition a list into even and odd numbers.

Remove null or empty strings from a list.

ðŸ”¶ Advanced Level
Sort a list of custom objects (e.g., Person) by age or name.

Group employees by department and then map their names.

Find the oldest person in a list using reduce.

Find the second highest salary from a list of employees.

Convert a nested map to a flat stream of entries.

Perform parallel stream operations and measure execution time.

Chain multiple stream operations (map â†’ filter â†’ sort â†’ collect).